<?php
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP
 */

require_once 'config.php';
require_once 'EmailService.php';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ñ–∞–π–ª –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
$isCLI = php_sapi_name() === 'cli';

if (!$isCLI) {
    echo "<html><head><meta charset='UTF-8'><title>Email Test</title></head><body>";
    echo "<h1>üß™ –¢–µ—Å—Ç Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h1>";
}

function output($message, $isError = false) {
    global $isCLI;
    
    if ($isCLI) {
        echo ($isError ? "‚ùå " : "‚úÖ ") . $message . "\n";
    } else {
        $color = $isError ? 'red' : 'green';
        $icon = $isError ? '‚ùå' : '‚úÖ';
        echo "<p style='color: $color; font-family: monospace;'>$icon $message</p>";
    }
}

try {
    output("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    output("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞...");
    
    $requiredVars = ['MAIL_HOST', 'MAIL_USERNAME', 'MAIL_PASSWORD', 'ADMIN_EMAIL'];
    $missingVars = [];
    
    foreach ($requiredVars as $var) {
        $value = Config::get($var);
        if (empty($value)) {
            $missingVars[] = $var;
        } else {
            output("$var: " . (strlen($value) > 20 ? substr($value, 0, 20) . '...' : $value));
        }
    }
    
    if (!empty($missingVars)) {
        output("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: " . implode(', ', $missingVars), true);
        throw new Exception("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }
    
    output("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EmailService
    output("–°–æ–∑–¥–∞–Ω–∏–µ EmailService...");
    $emailService = new EmailService();
    output("EmailService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    output("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    $connectionTest = $emailService->testConnection();
    
    if ($connectionTest) {
        output("SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
    } else {
        output("–û—à–∏–±–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", true);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    output("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞...");
    
    $testOrderData = [
        'order_number' => 'TEST-' . date('YmdHis'),
        'from' => '–ú–æ—Å–∫–≤–∞',
        'to' => '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        'distance' => 635,
        'weight' => 1000,
        'cargo_type' => '–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑',
        'loading' => true,
        'additional_services' => '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email',
        'base_cost' => 15000,
        'loading_cost' => 2000,
        'additional_cost' => 1000,
        'total_cost' => 18000,
        'created_at' => date('Y-m-d H:i:s')
    ];
    
    $emailSent = $emailService->sendOrderConfirmation($testOrderData);
    
    if ($emailSent) {
        output("‚úâÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
        output("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫: " . Config::get('ADMIN_EMAIL'));
    } else {
        output("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞", true);
    }
    
    output("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    
} catch (Exception $e) {
    output("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage(), true);
    output("–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: " . $e->getTraceAsString(), true);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö
output("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö:");
output("Email –ª–æ–≥: backend/logs/email_log.txt");
output("–ó–∞–∫–∞–∑—ã: backend/logs/orders.txt");

if (!$isCLI) {
    echo "</body></html>";
}
?>