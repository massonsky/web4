<?php
require_once 'config.php';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º PHPMailer
// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ Composer
if (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    require_once __DIR__ . '/../vendor/autoload.php';
} else {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    $phpmailerPath = __DIR__ . '/PHPMailer/src/';
    if (!file_exists($phpmailerPath . 'Exception.php') || 
        !file_exists($phpmailerPath . 'PHPMailer.php') || 
        !file_exists($phpmailerPath . 'SMTP.php')) {
        throw new Exception('PHPMailer not found. Please install PHPMailer via Composer or manually.');
    }
    
    require_once $phpmailerPath . 'Exception.php';
    require_once $phpmailerPath . 'PHPMailer.php';
    require_once $phpmailerPath . 'SMTP.php';
}

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

class EmailService {
    private $mailer;
    
    public function __construct() {
        $this->mailer = new PHPMailer(true);
        $this->configure();
    }
    
    private function configure() {
        try {
            // Server settings
            $this->mailer->isSMTP();
            $this->mailer->Host = Config::get('MAIL_HOST', 'smtp.gmail.com');
            $this->mailer->SMTPAuth = true;
            $this->mailer->Username = Config::get('MAIL_USERNAME');
            $this->mailer->Password = Config::get('MAIL_PASSWORD');
            $this->mailer->SMTPSecure = Config::get('MAIL_ENCRYPTION', 'tls');
            $this->mailer->Port = Config::get('MAIL_PORT', 587);
            
            // Default sender
            $this->mailer->setFrom(
                Config::get('MAIL_FROM_ADDRESS'), 
                Config::get('MAIL_FROM_NAME', 'Cargo Transport')
            );
            
            // Encoding
            $this->mailer->CharSet = 'UTF-8';
            
        } catch (Exception $e) {
            error_log('Email configuration error: ' . $e->getMessage());
            throw $e;
        }
    }
    
    public function sendOrderConfirmation($orderData) {
        try {
            // Recipients
            $this->mailer->addAddress(Config::get('ADMIN_EMAIL', 'admin@example.com'));
            
            // Content
            $this->mailer->isHTML(true);
            $this->mailer->Subject = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #' . $orderData['order_number'];
            
            $htmlBody = $this->generateOrderEmailTemplate($orderData);
            $this->mailer->Body = $htmlBody;
            
            // Plain text version
            $this->mailer->AltBody = $this->generatePlainTextOrder($orderData);
            
            $result = $this->mailer->send();
            
            // Log email sending
            $this->logEmail($orderData['order_number'], 'order_confirmation', $result);
            
            return $result;
            
        } catch (Exception $e) {
            error_log('Email sending error: ' . $e->getMessage());
            $this->logEmail($orderData['order_number'] ?? 'unknown', 'order_confirmation', false, $e->getMessage());
            return false;
        } finally {
            // Clear addresses for next use
            $this->mailer->clearAddresses();
        }
    }
    
    private function generateOrderEmailTemplate($orderData) {
        $html = '
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</title>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
                .content { background: #f9f9f9; padding: 20px; }
                .order-details { background: white; padding: 15px; margin: 10px 0; border-radius: 5px; }
                .total { font-size: 18px; font-weight: bold; color: #667eea; }
                .footer { text-align: center; padding: 20px; color: #666; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üöõ Cargo Transport</h1>
                    <p>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</p>
                </div>
                
                <div class="content">
                    <h2>–ó–∞–∫–∞–∑ #' . htmlspecialchars($orderData['order_number']) . '</h2>
                    
                    <div class="order-details">
                        <h3>üìç –ú–∞—Ä—à—Ä—É—Ç</h3>
                        <p><strong>–û—Ç–∫—É–¥–∞:</strong> ' . htmlspecialchars($orderData['from']) . '</p>
                        <p><strong>–ö—É–¥–∞:</strong> ' . htmlspecialchars($orderData['to']) . '</p>
                        <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ' . htmlspecialchars($orderData['distance']) . ' –∫–º</p>
                    </div>
                    
                    <div class="order-details">
                        <h3>üì¶ –ì—Ä—É–∑</h3>
                        <p><strong>–í–µ—Å:</strong> ' . htmlspecialchars($orderData['weight']) . ' –∫–≥</p>
                        <p><strong>–¢–∏–ø –≥—Ä—É–∑–∞:</strong> ' . htmlspecialchars($orderData['cargo_type']) . '</p>
                    </div>
                    
                    <div class="order-details">
                        <h3>üöö –£—Å–ª—É–≥–∏</h3>
                        <p><strong>–ü–æ–≥—Ä—É–∑–∫–∞:</strong> ' . ($orderData['loading'] ? '–î–∞' : '–ù–µ—Ç') . '</p>
                        <p><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</strong> ' . htmlspecialchars($orderData['additional_services']) . '</p>
                    </div>
                    
                    <div class="order-details">
                        <h3>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å</h3>
                        <p><strong>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ' . number_format($orderData['base_cost'], 0, ',', ' ') . ' ‚ÇΩ</p>
                        <p><strong>–ü–æ–≥—Ä—É–∑–∫–∞:</strong> ' . number_format($orderData['loading_cost'], 0, ',', ' ') . ' ‚ÇΩ</p>
                        <p><strong>–î–æ–ø. —É—Å–ª—É–≥–∏:</strong> ' . number_format($orderData['additional_cost'], 0, ',', ' ') . ' ‚ÇΩ</p>
                        <p class="total">–ò—Ç–æ–≥–æ: ' . number_format($orderData['total_cost'], 0, ',', ' ') . ' ‚ÇΩ</p>
                    </div>
                    
                    <div class="order-details">
                        <h3>üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h3>
                        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ' . date('d.m.Y H:i', strtotime($orderData['created_at'])) . '</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>
                    </div>
                </div>
                
                <div class="footer">
                    <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Cargo Transport</p>
                    <p>¬© ' . date('Y') . ' Cargo Transport. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </div>
        </body>
        </html>';
        
        return $html;
    }
    
    private function generatePlainTextOrder($orderData) {
        $text = "–ù–û–í–´–ô –ó–ê–ö–ê–ó #" . $orderData['order_number'] . "\n\n";
        $text .= "–ú–ê–†–®–†–£–¢:\n";
        $text .= "–û—Ç–∫—É–¥–∞: " . $orderData['from'] . "\n";
        $text .= "–ö—É–¥–∞: " . $orderData['to'] . "\n";
        $text .= "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " . $orderData['distance'] . " –∫–º\n\n";
        
        $text .= "–ì–†–£–ó:\n";
        $text .= "–í–µ—Å: " . $orderData['weight'] . " –∫–≥\n";
        $text .= "–¢–∏–ø: " . $orderData['cargo_type'] . "\n\n";
        
        $text .= "–£–°–õ–£–ì–ò:\n";
        $text .= "–ü–æ–≥—Ä—É–∑–∫–∞: " . ($orderData['loading'] ? '–î–∞' : '–ù–µ—Ç') . "\n";
        $text .= "–î–æ–ø. —É—Å–ª—É–≥–∏: " . $orderData['additional_services'] . "\n\n";
        
        $text .= "–°–¢–û–ò–ú–û–°–¢–¨:\n";
        $text .= "–ë–∞–∑–æ–≤–∞—è: " . number_format($orderData['base_cost'], 0, ',', ' ') . " ‚ÇΩ\n";
        $text .= "–ü–æ–≥—Ä—É–∑–∫–∞: " . number_format($orderData['loading_cost'], 0, ',', ' ') . " ‚ÇΩ\n";
        $text .= "–î–æ–ø. —É—Å–ª—É–≥–∏: " . number_format($orderData['additional_cost'], 0, ',', ' ') . " ‚ÇΩ\n";
        $text .= "–ò–¢–û–ì–û: " . number_format($orderData['total_cost'], 0, ',', ' ') . " ‚ÇΩ\n\n";
        
        $text .= "–î–∞—Ç–∞: " . date('d.m.Y H:i', strtotime($orderData['created_at'])) . "\n";
        $text .= "–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\n";
        
        return $text;
    }
    
    private function logEmail($orderNumber, $type, $success, $error = null) {
        $logData = [
            'timestamp' => date('Y-m-d H:i:s'),
            'order_number' => $orderNumber,
            'email_type' => $type,
            'success' => $success ? 'true' : 'false',
            'error' => $error
        ];
        
        $logEntry = json_encode($logData) . "\n";
        $logDir = __DIR__ . '/logs';
        if (!is_dir($logDir)) {
            mkdir($logDir, 0755, true);
        }
        file_put_contents($logDir . '/email_log.txt', $logEntry, FILE_APPEND | LOCK_EX);
    }
    
    public function testConnection() {
        try {
            $this->mailer->smtpConnect();
            $this->mailer->smtpClose();
            return true;
        } catch (Exception $e) {
            error_log('SMTP connection test failed: ' . $e->getMessage());
            return false;
        }
    }
}
?>